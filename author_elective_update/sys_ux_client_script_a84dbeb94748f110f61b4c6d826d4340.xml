<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="DELETE">
        <includes>e75113c0c3302010de10a0f89d40dd0e</includes>
        <macroponent display_value="Record">4b3d3eb94748f110f61b4c6d826d4300</macroponent>
        <name>recordUserPrefState</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({api, event, helpers, imports}) {
    // event name
    const eventName = event.name;

    // import the getUserPreference method from userPreferenceUtils script includes
    const {
        getUserPreference
    } = imports["sn_uib_base_aw.userPreferenceUtils"](api.context.props.userPrefs);

    const COMPACT_PREF_NAME = "glide.ui.compact";
    const isCompact = getUserPreference(COMPACT_PREF_NAME);

    // Sidebar specific constants
    const DEFAULT_RATIO_OPEN =  75;
    const DEFAULT_POSITION_CLOSED =  isCompact ? "-40px" : "-48px";
    const SIDEBAR_CLOSED_CONSTRAINT =  {  "minPixels": isCompact ? 40 : 48 };
    const SIDEBAR_OPEN_CONSTRAINT =  { "minRatio": 20, "minPixels": 370 };

    /**
     * setRibbonCollapsedState - Allows ribbon userPref to be toggled from the settings menu
     */
    const setRibbonCollapsedState = () => {
        // preference name
        const SHOW_RIBBON_PREF_NAME = "workspace.showRibbon";

        // fetch the user's show ribbon preference value
        const showRibbon = getUserPreference(SHOW_RIBBON_PREF_NAME);

        // set the showRibbon to isRibbonCollapsed in state properties
        api.setState('isRibbonCollapsed', !showRibbon);
    };

    /**
     * onLoadSidebarState - When page is loading, either a defined user pref is read for the sidebar ratio,
     * the preference name is initially built since the table name is part of the user pref name
     */
    const onLoadSidebarState = () => {
        // Build the user pref name for this preference at initialization time
        const PREFIX = "workspace.layout.sidebar_ratio.";
        const table = api.context.props.table || 'global';
        const sidebarRatioPreference = PREFIX + table;

        //Only lookup the preference if it isn't in state
        if (api.state.sidebarRatioPreference != sidebarRatioPreference) {
            // save the preference name in a client state variable, which is bound to the data resouce below
            api.setState('sidebarRatioPreference', sidebarRatioPreference);

            // the preference name is read, now look it up.    
            api.data.getSidebarRatioPreference.refresh();
        }
    };

    /**
     * toggleSidebar - toggle the sidebar based on whether the sidebar is shown or hidden
     */
    const toggleSidebar = (isHidden) => {
        if (isHidden) {
            // If the savedSidebarRatio has not been initialized before hiding the element
            // then save it before collapsing the sidebar.
            if(!api.state.sidebarRatioSaved)
                api.setState('sidebarRatioSaved', api.state.sidebarDividerPosition);

            // close the sidebar
            api.setState("sidebarPaneContraints", SIDEBAR_CLOSED_CONSTRAINT);
            api.setState("sidebarDividerPosition", DEFAULT_POSITION_CLOSED);
        } else {
            // open the sidebar
            api.setState("sidebarPaneContraints", SIDEBAR_OPEN_CONSTRAINT);
            api.setState("sidebarDividerPosition", api.state.sidebarRatioSaved);
        }
        api.setState("sidebarDisabled", isHidden);
    };

    /**
     * onChangeSidebarState - As a result of user pref setting toggle action, set the state of the sidebar
     */
    const onChangeSidebarState = () => {
        // preference name
        const SHOW_SIDEBAR_PREF_NAME = "workspace.showAgentAssist";

        // fetch the user's show sidebar preference value
        const pref = getUserPreference(SHOW_SIDEBAR_PREF_NAME);

        // set the showRibbon to isRibbonCollapsed in state properties
        toggleSidebar(!pref);
    };

    /**
     * onToggleSidebar - As a result of icon based toggle user action, set the state of the sidebar
     */
    const onToggleSidebar = () => {
        const { sidebarActiveTab, sidebarDisabled } = api.state;
        const { name } = event.payload;
        const isHidden = (name == sidebarActiveTab && !sidebarDisabled);
        toggleSidebar(isHidden);
    };

    /**
     * onLoadUserPreference - Determine whether to show the sidebar for new or users who do not have userPrefs saved
     */
    const onLoadUserPreference = (userPref) => {
        // preference name
        const SHOW_SIDEBAR_PREF_NAME = "workspace.showAgentAssist";

        // fetch the user's show sidebar preference value
        const sidebarOn = getUserPreference(SHOW_SIDEBAR_PREF_NAME);

        // Startup determination of sidebar status, driven first by menu toggle, then by possibly save pref value
        let position;
        const sidebarRatioSaved = (userPref.length > 0 && userPref[0].value) ? userPref[0].value : DEFAULT_RATIO_OPEN;
        if (sidebarOn) {
              position =  sidebarRatioSaved;
        } else {
              position = DEFAULT_POSITION_CLOSED;
              api.setState("sidebarPaneContraints", SIDEBAR_CLOSED_CONSTRAINT);
        }

        /* Persist the sidebar status in client state variables
         * + sidebarDisabled: sidebar collapse if true, expanded if false
         * + sidebarDividerPosition: real sidebar position, takes value of
         *  - either DEFAULT_POSITION_CLOSED when collapsed
         *  - or sidebarRatioSaved when expanded
         * + sidebarRatioSaved: the width sidebar should be when expanded
        */
        api.setState('sidebarDisabled', !sidebarOn);
        api.setState('sidebarDividerPosition', position);
        api.setState('sidebarRatioSaved', sidebarRatioSaved);
    };

    const sidebarViewportsConfigured = () => {
        let viewports = api.viewports;

        if (!viewports || !viewports.isRouteInitializationCompleted)
            return false;
        
        if (viewports.contextual_sidebar.hasRoutes)
            return true;
    }

    // handle the user pref states based on one of the following changes: the macroponent ready event, 
    // macroponent property change event; sidebar icon clicks and the user pref  fetch succeded
    switch(eventName) {
        case 'MACROPONENT_VIEWPORT_ROUTE_INITIALIZATION_COMPLETED':
            // viewports object is ready, now check for active screens, and manipulate sidebar only if there are active screens
            if (sidebarViewportsConfigured())
                onLoadSidebarState();
            break;

        case 'MACROPONENT_READY':
            setRibbonCollapsedState();
            break;

        case 'MACROPONENT_PROPERTY_CHANGED':
            if (event.payload.name === 'userPrefs') {
                setRibbonCollapsedState();
                if (sidebarViewportsConfigured())
                    onChangeSidebarState();
            }
            break;

        case 'NOW_RECORD_COMMON_SIDEBAR#ACTION_CLICKED':
            onToggleSidebar();
            break;

        case 'DATA_FETCH_SUCCEEDED':
            if (event.elementId === 'getSidebarRatioPreference') 
                onLoadUserPreference(api.data.getSidebarRatioPreference.result.preferences);
            break;

        default:
            break;
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-16 08:32:47</sys_created_on>
        <sys_id>a84dbeb94748f110f61b4c6d826d4340</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>recordUserPrefState</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ux_client_script_a84dbeb94748f110f61b4c6d826d4340</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-16 08:32:47</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</application>
        <file_path/>
        <instance_id>3faa8da0dbab5f846578f22ebf9619ee</instance_id>
        <instance_name>dev66805</instance_name>
        <name>sys_ux_client_script_a84dbeb94748f110f61b4c6d826d4340</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ux_client_script"&gt;&lt;sys_ux_client_script action="INSERT_OR_UPDATE"&gt;&lt;includes&gt;e75113c0c3302010de10a0f89d40dd0e&lt;/includes&gt;&lt;macroponent display_value="Record"&gt;4b3d3eb94748f110f61b4c6d826d4300&lt;/macroponent&gt;&lt;name&gt;recordUserPrefState&lt;/name&gt;&lt;preset/&gt;&lt;required_translations&gt;[ ]&lt;/required_translations&gt;&lt;script&gt;&lt;![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({api, event, helpers, imports}) {
    // event name
    const eventName = event.name;

    // import the getUserPreference method from userPreferenceUtils script includes
    const {
        getUserPreference
    } = imports["sn_uib_base_aw.userPreferenceUtils"](api.context.props.userPrefs);

    const COMPACT_PREF_NAME = "glide.ui.compact";
    const isCompact = getUserPreference(COMPACT_PREF_NAME);

    // Sidebar specific constants
    const DEFAULT_RATIO_OPEN =  75;
    const DEFAULT_POSITION_CLOSED =  isCompact ? "-40px" : "-48px";
    const SIDEBAR_CLOSED_CONSTRAINT =  {  "minPixels": isCompact ? 40 : 48 };
    const SIDEBAR_OPEN_CONSTRAINT =  { "minRatio": 20, "minPixels": 370 };

    /**
     * setRibbonCollapsedState - Allows ribbon userPref to be toggled from the settings menu
     */
    const setRibbonCollapsedState = () =&gt; {
        // preference name
        const SHOW_RIBBON_PREF_NAME = "workspace.showRibbon";

        // fetch the user's show ribbon preference value
        const showRibbon = getUserPreference(SHOW_RIBBON_PREF_NAME);

        // set the showRibbon to isRibbonCollapsed in state properties
        api.setState('isRibbonCollapsed', !showRibbon);
    };

    /**
     * onLoadSidebarState - When page is loading, either a defined user pref is read for the sidebar ratio,
     * the preference name is initially built since the table name is part of the user pref name
     */
    const onLoadSidebarState = () =&gt; {
        // Build the user pref name for this preference at initialization time
        const PREFIX = "workspace.layout.sidebar_ratio.";
        const table = api.context.props.table || 'global';
        const sidebarRatioPreference = PREFIX + table;

        //Only lookup the preference if it isn't in state
        if (api.state.sidebarRatioPreference != sidebarRatioPreference) {
            // save the preference name in a client state variable, which is bound to the data resouce below
            api.setState('sidebarRatioPreference', sidebarRatioPreference);

            // the preference name is read, now look it up.    
            api.data.getSidebarRatioPreference.refresh();
        }
    };

    /**
     * toggleSidebar - toggle the sidebar based on whether the sidebar is shown or hidden
     */
    const toggleSidebar = (isHidden) =&gt; {
        if (isHidden) {
            // If the savedSidebarRatio has not been initialized before hiding the element
            // then save it before collapsing the sidebar.
            if(!api.state.sidebarRatioSaved)
                api.setState('sidebarRatioSaved', api.state.sidebarDividerPosition);

            // close the sidebar
            api.setState("sidebarPaneContraints", SIDEBAR_CLOSED_CONSTRAINT);
            api.setState("sidebarDividerPosition", DEFAULT_POSITION_CLOSED);
        } else {
            // open the sidebar
            api.setState("sidebarPaneContraints", SIDEBAR_OPEN_CONSTRAINT);
            api.setState("sidebarDividerPosition", api.state.sidebarRatioSaved);
        }
        api.setState("sidebarDisabled", isHidden);
    };

    /**
     * onChangeSidebarState - As a result of user pref setting toggle action, set the state of the sidebar
     */
    const onChangeSidebarState = () =&gt; {
        // preference name
        const SHOW_SIDEBAR_PREF_NAME = "workspace.showAgentAssist";

        // fetch the user's show sidebar preference value
        const pref = getUserPreference(SHOW_SIDEBAR_PREF_NAME);

        // set the showRibbon to isRibbonCollapsed in state properties
        toggleSidebar(!pref);
    };

    /**
     * onToggleSidebar - As a result of icon based toggle user action, set the state of the sidebar
     */
    const onToggleSidebar = () =&gt; {
        const { sidebarActiveTab, sidebarDisabled } = api.state;
        const { name } = event.payload;
        const isHidden = (name == sidebarActiveTab &amp;&amp; !sidebarDisabled);
        toggleSidebar(isHidden);
    };

    /**
     * onLoadUserPreference - Determine whether to show the sidebar for new or users who do not have userPrefs saved
     */
    const onLoadUserPreference = (userPref) =&gt; {
        // preference name
        const SHOW_SIDEBAR_PREF_NAME = "workspace.showAgentAssist";

        // fetch the user's show sidebar preference value
        const sidebarOn = getUserPreference(SHOW_SIDEBAR_PREF_NAME);

        // Startup determination of sidebar status, driven first by menu toggle, then by possibly save pref value
        let position;
        const sidebarRatioSaved = (userPref.length &gt; 0 &amp;&amp; userPref[0].value) ? userPref[0].value : DEFAULT_RATIO_OPEN;
        if (sidebarOn) {
              position =  sidebarRatioSaved;
        } else {
              position = DEFAULT_POSITION_CLOSED;
              api.setState("sidebarPaneContraints", SIDEBAR_CLOSED_CONSTRAINT);
        }

        /* Persist the sidebar status in client state variables
         * + sidebarDisabled: sidebar collapse if true, expanded if false
         * + sidebarDividerPosition: real sidebar position, takes value of
         *  - either DEFAULT_POSITION_CLOSED when collapsed
         *  - or sidebarRatioSaved when expanded
         * + sidebarRatioSaved: the width sidebar should be when expanded
        */
        api.setState('sidebarDisabled', !sidebarOn);
        api.setState('sidebarDividerPosition', position);
        api.setState('sidebarRatioSaved', sidebarRatioSaved);
    };

    const sidebarViewportsConfigured = () =&gt; {
        let viewports = api.viewports;

        if (!viewports || !viewports.isRouteInitializationCompleted)
            return false;
        
        if (viewports.contextual_sidebar.hasRoutes)
            return true;
    }

    // handle the user pref states based on one of the following changes: the macroponent ready event, 
    // macroponent property change event; sidebar icon clicks and the user pref  fetch succeded
    switch(eventName) {
        case 'MACROPONENT_VIEWPORT_ROUTE_INITIALIZATION_COMPLETED':
            // viewports object is ready, now check for active screens, and manipulate sidebar only if there are active screens
            if (sidebarViewportsConfigured())
                onLoadSidebarState();
            break;

        case 'MACROPONENT_READY':
            setRibbonCollapsedState();
            break;

        case 'MACROPONENT_PROPERTY_CHANGED':
            if (event.payload.name === 'userPrefs') {
                setRibbonCollapsedState();
                if (sidebarViewportsConfigured())
                    onChangeSidebarState();
            }
            break;

        case 'NOW_RECORD_COMMON_SIDEBAR#ACTION_CLICKED':
            onToggleSidebar();
            break;

        case 'DATA_FETCH_SUCCEEDED':
            if (event.elementId === 'getSidebarRatioPreference') 
                onLoadUserPreference(api.data.getSidebarRatioPreference.result.preferences);
            break;

        default:
            break;
    }
}]]&gt;&lt;/script&gt;&lt;script_api_version&gt;2.0.0&lt;/script_api_version&gt;&lt;sys_class_name&gt;sys_ux_client_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-07-16 08:32:47&lt;/sys_created_on&gt;&lt;sys_id&gt;a84dbeb94748f110f61b4c6d826d4340&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;recordUserPrefState&lt;/sys_name&gt;&lt;sys_package display_value="NeedIt" source="x_58872_needit"&gt;6ead8e780f603200cd674f8ce1050ed1&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NeedIt"&gt;6ead8e780f603200cd674f8ce1050ed1&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ux_client_script_a84dbeb94748f110f61b4c6d826d4340&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-07-16 08:32:47&lt;/sys_updated_on&gt;&lt;target&gt;macroponent&lt;/target&gt;&lt;type&gt;default&lt;/type&gt;&lt;/sys_ux_client_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-456137159</payload_hash>
        <record_name>recordUserPrefState</record_name>
        <reverted_from/>
        <source>539f0b09474c3110f61b4c6d826d43c4</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-16 08:32:47</sys_created_on>
        <sys_id>244dbeb94748f110f61b4c6d826d4354</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1895dd4b0ea0000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-16 08:32:47</sys_updated_on>
        <type>UX Client Script</type>
        <update_guid>a84dbeb91f48f1106bdbe274f4cf9853</update_guid>
        <update_guid_history>a84dbeb91f48f1106bdbe274f4cf9853:-456137159</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-16 08:40:23</sys_created_on>
        <sys_db_object display_value="" name="sys_ux_client_script">sys_ux_client_script</sys_db_object>
        <sys_id>1c442e66ae8c423e9a66e809678b19c1</sys_id>
        <sys_metadata>a84dbeb94748f110f61b4c6d826d4340</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>recordUserPrefState</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_scope_delete display_value="">94872a8897db403e8ee69a431de2fca4</sys_scope_delete>
        <sys_update_name>sys_ux_client_script_a84dbeb94748f110f61b4c6d826d4340</sys_update_name>
        <sys_update_version display_value="sys_ux_client_script_a84dbeb94748f110f61b4c6d826d4340">244dbeb94748f110f61b4c6d826d4354</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-16 08:40:23</sys_updated_on>
    </sys_metadata_delete>
</record_update>
